const charTitle = 'Caractères à vérifier : ';
const charClass = 'sp-warning--char';
const spaceBeforeTitle = 'Espace précédente manquante ou espace suivante en trop';
const spaceAfterTitle = 'Précédé par une espace ou caractère suivant collé ou suivi par une espace finale';
const nbkSpaceBeforeTitle = 'Non précédé par une espace insécable ou non suivi par une espace';
const nbkSpaceAfterTitle = 'Non précédé par une espace ou non suivi par une espace insécable';

let cases = {
	badWords: {
		name: '',
		title: 'Mots déconseillés ou mal orthographiés : ',
		message: 'Mot déconseillé ou mal orthographié',
		cssClass: 'sp-warning--word',
		counter: 0,
		regex: rgxBadWords,
	},
	quotes: {
		name: 'apostrophe droite',
		title: 'Apostrophes droites : ',
		message: 'Apostrophe droite au lieu d’une apostrophe courbe',
		cssClass: 'sp-warning--quote',
		counter: 0,
		regex: rgxSingleQuotes,
	},
	slash: {
		name: 'barre oblique',
		title: charTitle,
		message: 'Espace précédente en trop ou espace suivante en trop',
		cssClass: charClass,
		counter: 0,
		regex: rgxSlash,
	},
	openHook: {
		name: 'crochet ouvrant',
		title: charTitle,
		message: spaceBeforeTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxOpenHook,
	},
	openParenthesis: {
		name: 'parenthèse ouvrante',
		title: charTitle,
		message: spaceBeforeTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxOpenParenthesis,
	},
	openBrace: {
		name: 'accolade ouvrante',
		title: charTitle,
		message: spaceBeforeTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxOpenBrace,
	},
	ellipsis: {
		name: 'points de suspension',
		title: charTitle,
		message: spaceAfterTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxEllipsis,
	},
	period: {
		name: 'point',
		title: charTitle,
		message: spaceAfterTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxPeriod,
	},
	comma: {
		name: 'virgule',
		title: charTitle,
		message: spaceAfterTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxComma,
	},
	closeHook: {
		name: 'crochet fermant',
		title: charTitle,
		message: spaceAfterTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxCloseHook,
	},
	closeParenthesis: {
		name: 'parenthèse fermante',
		title: charTitle,
		message: spaceAfterTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxCloseParenthesis,
	},
	closeBrace: {
		name: 'accolade fermante',
		title: charTitle,
		message: spaceAfterTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxCloseBrace,
	},
	exclamationPoint: {
		name: 'point d’exclamation',
		title: charTitle,
		message: nbkSpaceBeforeTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxExclamationPoint,
	},
	plusSign: {
		name: 'signe plus',
		title: charTitle,
		message: nbkSpaceBeforeTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxPlusSign,
	},
	questionMark: {
		name: 'point d’interrogation',
		title: charTitle,
		message: nbkSpaceBeforeTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxQuestionMark,
	},
	colon: {
		name: 'deux points',
		title: charTitle,
		message: nbkSpaceBeforeTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxColon,
	},
	semiColon: {
		name: 'point-virgule',
		title: charTitle,
		message: nbkSpaceBeforeTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxSemiColon,
	},
	closingFrQuote: {
		name: 'guillemet français fermant',
		title: charTitle,
		message: nbkSpaceBeforeTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxClosingFrQuote,
	},
	openFrQuote: {
		name: 'guillemet français ouvrant',
		title: charTitle,
		message: nbkSpaceAfterTitle,
		cssClass: charClass,
		counter: 0,
		regex: rgxOpenFrQuote,
	},
	Space: {
		name: 'espace sécable',
		title: '',
		message: 'Espace en début ou en fin de chaîne',
		cssClass: 'sp-spaces--showing',
		counter: 0,
		regex: /^ | $/gm,
	},
	nbkSpaces: {
		name: 'espace insécable',
		title: '',
		message: 'Espace insécable',
		cssClass: 'sp-nbkspaces--showing',
		counter: 0,
		regex: /\u00A0/gm,
	},
};
